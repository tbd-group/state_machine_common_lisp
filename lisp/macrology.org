#+TITLE: Macrology
#+DATE: <2015-12-03 Thu>
#+AUTHOR: Brian Beckman
#+OPTIONS: ':t *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t c:nil creator:comment d:(not LOGBOOK) date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t toc:t todo:t |:t
#+EXCLUDE_TAGS: noexport
#+LANGUAGE: en
#+SELECT_TAGS: export
#+LaTeX_CLASS_OPTIONS: [10pt,oneside,x11names]
#+LaTeX_HEADER: \usepackage{geometry}
#+LaTeX_HEADER: \usepackage{palatino}
#+LaTeX_HEADER: \usepackage{siunitx}
#+LaTeX_HEADER: \usepackage{braket}
#+LaTeX_HEADER: \usepackage[euler-digits,euler-hat-accent]{eulervm}
#+OPTIONS: toc:2

* Introduction

  This is a transcription with robustifications, improvements and tests of Doug
  Hoyte's "Let Over Lambda."

* Version information

  This is version 0.0.1 of the text. The following are reports of versions of
  Emacs, Org-Mode, and SBL.

  #+BEGIN_SRC emacs-lisp :results output :exports results :tangle no
    (princ (concat (format "Emacs version: %s\n" (emacs-version))
                   (format "org version: %s\n" (org-version))))
    (setq org-confirm-babel-evaluate nil)
    (org-babel-map-src-blocks nil (org-babel-remove-result))
  #+END_SRC

  #+RESULTS:
  : Emacs version: GNU Emacs 24.5.1 (x86_64-apple-darwin13.4.0, NS apple-appkit-1265.21)
  :  of 2015-04-10 on builder10-9.porkrind.org
  : org version: 8.3.1

#+BEGIN_SRC lisp :exports results
    (concatenate 'string "SBCL version: " (lisp-implementation-version))
#+END_SRC

#+RESULTS:
: SBCL version: 1.3.1

* Utilities
** Symb

   Looks like Hoyte's (Grahams'?) =mkstr= just concatenates strings. We test
   that after making a way to create random strings.

#+BEGIN_SRC lisp :exports code :tangle yes
  (defun mkstr (&rest args)
    (with-output-to-string (s)
      (dolist (a args) (princ a s))))
#+END_SRC

#+RESULTS:
: MKSTR

#+BEGIN_SRC lisp :exports code :tangle yes
  (defun symb (&rest args)
    (values (intern (apply #'mkstr args))))
#+END_SRC

#+RESULTS:
: SYMB

*** Empty Strings

    First, a test function:

#+BEGIN_SRC lisp :tangle yes :exports code
  (defun empty-string-p (s)
    (and (stringp s)
         (= 0 (length s))))
#+END_SRC

#+RESULTS:
: EMPTY-STRING-P

    Notice that =concatenate= will produce empty strings:

#+BEGIN_SRC lisp :tangle no :exports both
  (empty-string-p (concatenate 'string))
#+END_SRC

#+RESULTS:
: T

** Random Strings

Adapted from codecodex.com:  http://tinyurl.com/jql2d9b.

Here's a straightforward way to produce random passwords without uncials, but
that may begin with digits. Strings beginning with digits are unsuitable as
identifier symbols (looks like Common Lisp will allow such, but they're weird).

#+BEGIN_SRC lisp :tangle no :exports code
  (defun random-password (length)
    (with-output-to-string (stream)
      (let ((*print-base* 36))
        (loop repeat length do (princ (random 36) stream)))))
#+END_SRC

#+RESULTS:
: RANDOM-PASSWORD

It will produce empty strings; should it?

#+BEGIN_SRC lisp :tangle no :exports both
  (empty-string-p (random-password 0))
#+END_SRC

#+RESULTS:
: T

Here's an LOL way. This, incidentally includes uncials, and that's a problem for
producing identifiers. We fix that problem in =random-identifier=.

#+BEGIN_SRC lisp :tangle yes :exports code
  (let* ((capitals "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
         (uncials "abcdefghijklmnopqrstuvwxyz")
         (alphas (concatenate 'string capitals uncials))
         (digits "0123456789")
         (chars (concatenate 'string alphas digits)))
    (defun random-password (len)
      (coerce (loop repeat len collect (aref chars (random (length chars))))
              'string)))
#+END_SRC

#+RESULTS:
: RANDOM-PASSWORD

This also will produce empty strings:

#+BEGIN_SRC lisp :tangle no :exports both
  (empty-string-p (random-password 0))
#+END_SRC

#+RESULTS:
: T

It does a nice job for positive lengths:

#+BEGIN_SRC lisp :tangle no :exports both
  (random-password 42)
#+END_SRC

#+RESULTS:
: qrjrOdPaxXhh2OodlW2BBmnC89QATN5qYlfo7oinKt

    Mkstr admits empty strings. Should it?

**** TODO Exclude empty strings?

#+BEGIN_SRC lisp :tangle no
  (length (mkstr))
#+END_SRC

#+RESULTS:
: 0

#+BEGIN_SRC lisp :tangle no
  (stringp (mkstr))
#+END_SRC

#+RESULTS:
: T

#+BEGIN_SRC lisp :tangle no
  (length "foo42")
#+END_SRC

#+RESULTS:
: 5

#+BEGIN_SRC lisp :tangle no
  (= 10 (length (mkstr "foo42" "bar42")))
#+END_SRC

#+RESULTS:
: T

#+BEGIN_SRC lisp :exports both :tangle no
  (symb "foo42" "bar42")
#+END_SRC

#+RESULTS:
: |foo42bar42|

#+BEGIN_SRC lisp :exports both :tangle no
  (symb "foo42" "bar42")
#+END_SRC

A symbol from an empty string works, but it's weird.  Should we exclude this
case?

**** TODO Exclude symbols of zero length?

#+BEGIN_SRC lisp :exports both :tangle no
  (symb "")
#+END_SRC

#+RESULTS:
: ||

#+BEGIN_SRC lisp :exports both :tangle no
  (symbol-name (symb ""))
#+END_SRC

#+RESULTS:

** Group

#+BEGIN_SRC lisp :exports both :tangle yes
  (defun group (source n)
    (if (<= n 0) (error "length must be a positive integer"))
    (labels ((rec (source acc)
               (let ((rest (nthcdr n source)))
                 (if (consp rest)
                     (rec rest (cons (subseq source 0 n)
                                     acc))
                     (nreverse
                      (cons source acc))))))
      (if source (rec source nil) nil)))
#+END_SRC

#+RESULTS:
: GROUP

*** Test

#+BEGIN_SRC lisp :exports both :tangle no
  (group '(1 2 3 4) 2)
#+END_SRC

#+RESULTS:
| 1 | 2 |
| 3 | 4 |

#+BEGIN_SRC lisp :exports both :tangle no
  (group '(1 2 3 4) 3)
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 |
| 4 |   |   |

#+BEGIN_SRC lisp :exports both :tangle no
  (group '(1 (2 3) 4) 2)
#+END_SRC

#+RESULTS:
| 1 | (2 3) |
| 4 |       |

#+BEGIN_SRC lisp :exports both :tangle no
  (group '(1 2 3 4) 1)
#+END_SRC

#+RESULTS:
| 1 |
| 2 |
| 3 |
| 4 |

** Flatten

#+BEGIN_SRC lisp :exports both :tangle yes
  (defun flatten (x)
    (labels ((rec (x acc)
               (cond ((null x) acc)
                     ((atom x) (cons x acc))
                     (t (rec
                         (car x)
                         (rec (cdr x) acc))))))
      (rec x nil)))
#+END_SRC

#+RESULTS:
: FLATTEN

*** Test

#+BEGIN_SRC lisp :exports both :tangle no
  (flatten '())
#+END_SRC

#+RESULTS:
: NIL

#+BEGIN_SRC lisp :exports both :tangle no
  (flatten '(1))
#+END_SRC

#+RESULTS:
| 1 |

#+BEGIN_SRC lisp :exports both :tangle no
  (flatten '(1 (2 3) 4))
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 | 4 |

#+BEGIN_SRC lisp :exports both :tangle no
  (flatten '((3)))
#+END_SRC

#+RESULTS:
| 3 |

* Units

** Unit of Time

#+BEGIN_SRC lisp :exports both :tangle yes :results values
  (defmacro unit-of-time  (value unit)
    `(* ,value
        ,(case unit
          ((s) 1)
          ((m) 60)
          ((h) 3600)
          ((d) 86400)
          ((ms) 1/1000)
          ((us) 1/1000000))))
#+END_SRC

#+RESULTS:
: UNIT-OF-TIME

* Named Let

#+BEGIN_SRC lisp :exports code :tangle yes :results values
  (defmacro nlet (n letargs &rest body)
    `(labels ((,n ,(mapcar #'car letargs)
                ,@body))
       (,n ,@(mapcar #'cadr letargs))))
#+END_SRC

#+RESULTS:
: NLET

** Test

   This doesn't print well. See http://stackoverflow.com/questions/34079242/.

#+BEGIN_SRC lisp :exports both :tangle no :results values
  (defun nlet-fact (n)
    (nlet fact ((n n))
          (if (zerop n)
              1
              (* n (fact (- n 1))))))
  (nlet-fact 60)
#+END_SRC

#+RESULTS:
: 8.32098711274139e+81

   All bignums seems to print poorly.  Here are a couple of other attempts:

#+BEGIN_SRC lisp :exports both :tangle no :results values
  (defun fact (n)
    (if (= 0 n)
        1
        (* n (fact (- n 1)))))
  (fact 60)
#+END_SRC

#+RESULTS:
: 8.32098711274139e+81

#+BEGIN_SRC lisp :exports both :tangle no :results values
  (defun range (max &key (min 0) (step 1))
    (loop for n from min below max by step
          collect n))
  (reduce #'* (range 61 :min 1))
#+END_SRC

#+RESULTS:
: 8.32098711274139e+81

#+BEGIN_SRC lisp
  (setf *print-pretty* nil)
#+END_SRC

#+RESULTS:
: NIL

#+BEGIN_SRC lisp :exports both :tangle no :results values
  (reduce #'* (range 61 :min 1))
#+END_SRC

#+RESULTS:
: 8.32098711274139e+81
* Macro Basics (Hoyte's LOL Ch. 3)

** Preliminary Tests

#+BEGIN_SRC lisp :tangle no
  (not ())
#+END_SRC

#+RESULTS:
: T

** G-BANG-SYMBOL-PREDICATE (Listing 3.5)

#+BEGIN_SRC lisp :tangle yes
  (defun g!-symbol-p (s)
    (and (symbolp s)
         (> (length (symbol-name s)) 2)
         (string= (symbol-name s)
                  "G!"
                  :start1 0
                  :end1 2)))
#+END_SRC

#+RESULTS:
: G!-SYMBOL-P

*** Test

#+BEGIN_SRC lisp :tangle no
  (string= "FOO42" (symbol-name 'foo42))
#+END_SRC

#+RESULTS:
: T

#+BEGIN_SRC lisp :tangle no
  (not (g!-symbol-p 'foo42))
#+END_SRC

#+RESULTS:
: T

** DEFMACRO-WITH-G-BANG (Listing 3.6)

#+BEGIN_SRC lisp :tangle yes
  (defmacro defmacro/g! (name args &rest body)
    (let ((syms (remove-duplicates
                 (remove-if-not #'g!-symbol-p
                                (flatten body)))))
      `(defmacro ,name ,args
         (let ,(mapcar
                (lambda (s)
                  `(,s (gensym ,(subseq
                                 (symbol-name s)
                                 2))))
                syms)
           ,@body))))
#+END_SRC

#+RESULTS:
: DEFMACRO/G!
